# -*- coding: utf-8 -*-
"""Emotion Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KtTd_WpOREiUJpKhWvf076uA9gsjywvB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Langkah 1: Persiapkan lingkungan di Google Colab
from google.colab import drive
drive.mount('/content/drive')

# Langkah 2: Muat data gambar menggunakan ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Emotion',
    target_size=(48, 48),
    batch_size=32,
    class_mode='categorical'
)

# Langkah 3: Bangun model CNN
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),  # Dropout layer untuk mengurangi overfitting
    Dense(3, activation='softmax')  # 3 kelas: 'angry', 'sad', 'happy'
])

# Langkah 4: Latih Model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(
      train_generator,
      steps_per_epoch=train_generator.samples // train_generator.batch_size,
      epochs=20)  # Meningkatkan jumlah epoch menjadi 20

# Langkah 5: Evaluasi model
plt.plot(history.history['accuracy'], label='accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

from sklearn.metrics import f1_score

# Langkah 1: Mendapatkan prediksi model terhadap data validasi
# Anda perlu menyiapkan generator data untuk data validasi
# Misalnya, jika Anda memiliki generator bernama validation_generator untuk data validasi
# Anda dapat menggunakan model.predict() untuk mendapatkan prediksi
# Misalnya: y_pred = model.predict(validation_generator)

# Contoh (asumsikan y_true adalah label validasi yang sebenarnya):
y_true = np.array([0, 1, 1, 0, 1])  # Label sebenarnya
y_pred = np.array([0, 1, 0, 0, 1])  # Prediksi dari model

# Langkah 2: Menghitung F1-Score
f1 = f1_score(y_true, y_pred, average='weighted')

print("F1-Score:", f1)

# Setelah pelatihan model, tambahkan kode berikut untuk menyimpan model ke dalam file .h5
model.save('/content/drive/MyDrive/emotion_model.h5')  # Ganti dengan path tempat Anda ingin menyimpan model

# Load the saved model
model = tf.keras.models.load_model('/content/drive/MyDrive/emotion_model.h5')  # Ganti dengan path tempat Anda menyimpan model

from google.colab import files
import os

# Path to the directory containing test images
test_image_dir = '/content/drive/MyDrive/Emotion'  # Ganti dengan path folder test Anda

# Load the trained model
model = tf.keras.models.load_model('/content/drive/MyDrive/emotion_model.h5')  # Ganti dengan path model Anda

# Function to predict emotion from an image file
def predict_emotion(image_path):
    img = image.load_img(image_path, target_size=(48, 48))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0  # Normalize the image
    prediction = model.predict(img_array)
    emotion_labels = ['Angry', 'Happy', 'Sad']
    predicted_class = np.argmax(prediction)
    return emotion_labels[predicted_class]

# Function to display the image and its predicted emotion
def display_image_with_prediction(image_path):
    img = image.load_img(image_path, target_size=(224, 224), interpolation='lanczos')  # Gunakan interpolasi yang lebih baik
    img = image.img_to_array(img)

    # Normalisasi kontras dan kejelasan
    img = img * 0.8  # Misalnya, tingkatkan kontras dengan mengalikan dengan 0.8
    img = np.clip(img, 0, 255)  # Pastikan nilai piksel tidak melebihi 255

    plt.imshow(img.astype(np.uint8))  # Konversi kembali ke tipe data integer untuk ditampilkan
    plt.axis('off')
    plt.show()
    predicted_emotion = predict_emotion(image_path)
    print('Hasil Prediksi:', predicted_emotion)

# Function to allow user to upload image file
def upload_image():
    uploaded = files.upload()
    for filename in uploaded.keys():
        return filename

# Example usage:
print("Upload an image file:")
uploaded_image_path = upload_image()
if uploaded_image_path:
    display_image_with_prediction(os.path.join(os.getcwd(), uploaded_image_path))
else:
    print("No image uploaded.")